/*
 * This file is generated by jOOQ.
 */
package com.example.travel.database.schema;


import com.example.travel.database.schema.tables.Country;
import com.example.travel.database.schema.tables.Customer;
import com.example.travel.database.schema.tables.Hotel;
import com.example.travel.database.schema.tables.Nutrition;
import com.example.travel.database.schema.tables.Transport;
import com.example.travel.database.schema.tables.Travel;
import com.example.travel.database.schema.tables.TravelType;
import com.example.travel.database.schema.tables.UserAccount;
import com.example.travel.database.schema.tables.records.CountryRecord;
import com.example.travel.database.schema.tables.records.CustomerRecord;
import com.example.travel.database.schema.tables.records.HotelRecord;
import com.example.travel.database.schema.tables.records.NutritionRecord;
import com.example.travel.database.schema.tables.records.TransportRecord;
import com.example.travel.database.schema.tables.records.TravelRecord;
import com.example.travel.database.schema.tables.records.TravelTypeRecord;
import com.example.travel.database.schema.tables.records.UserAccountRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * sql4458432.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CountryRecord> KEY_COUNTRY_PRIMARY = Internal.createUniqueKey(Country.COUNTRY, DSL.name("KEY_country_PRIMARY"), new TableField[] { Country.COUNTRY.COUNTRY_ID }, true);
    public static final UniqueKey<CustomerRecord> KEY_CUSTOMER_PRIMARY = Internal.createUniqueKey(Customer.CUSTOMER, DSL.name("KEY_customer_PRIMARY"), new TableField[] { Customer.CUSTOMER.CUSTOMER_ID }, true);
    public static final UniqueKey<HotelRecord> KEY_HOTEL_PRIMARY = Internal.createUniqueKey(Hotel.HOTEL, DSL.name("KEY_hotel_PRIMARY"), new TableField[] { Hotel.HOTEL.HOTEL_ID }, true);
    public static final UniqueKey<NutritionRecord> KEY_NUTRITION_PRIMARY = Internal.createUniqueKey(Nutrition.NUTRITION, DSL.name("KEY_nutrition_PRIMARY"), new TableField[] { Nutrition.NUTRITION.NUTRITION_ID }, true);
    public static final UniqueKey<TransportRecord> KEY_TRANSPORT_PRIMARY = Internal.createUniqueKey(Transport.TRANSPORT, DSL.name("KEY_transport_PRIMARY"), new TableField[] { Transport.TRANSPORT.TRANSPORT_ID }, true);
    public static final UniqueKey<TravelRecord> KEY_TRAVEL_PRIMARY = Internal.createUniqueKey(Travel.TRAVEL, DSL.name("KEY_travel_PRIMARY"), new TableField[] { Travel.TRAVEL.TRAVEL_ID }, true);
    public static final UniqueKey<TravelTypeRecord> KEY_TRAVEL_TYPE_PRIMARY = Internal.createUniqueKey(TravelType.TRAVEL_TYPE, DSL.name("KEY_travel_type_PRIMARY"), new TableField[] { TravelType.TRAVEL_TYPE.TYPE_ID }, true);
    public static final UniqueKey<UserAccountRecord> KEY_USER_ACCOUNT_ACCOUNT_ID_UNIQUE = Internal.createUniqueKey(UserAccount.USER_ACCOUNT, DSL.name("KEY_user_account_account_id_UNIQUE"), new TableField[] { UserAccount.USER_ACCOUNT.ACCOUNT_ID }, true);
    public static final UniqueKey<UserAccountRecord> KEY_USER_ACCOUNT_PRIMARY = Internal.createUniqueKey(UserAccount.USER_ACCOUNT, DSL.name("KEY_user_account_PRIMARY"), new TableField[] { UserAccount.USER_ACCOUNT.ACCOUNT_ID }, true);
    public static final UniqueKey<UserAccountRecord> KEY_USER_ACCOUNT_USERNAME_UNIQUE = Internal.createUniqueKey(UserAccount.USER_ACCOUNT, DSL.name("KEY_user_account_username_UNIQUE"), new TableField[] { UserAccount.USER_ACCOUNT.USERNAME }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<HotelRecord, CountryRecord> COUNTRYID = Internal.createForeignKey(Hotel.HOTEL, DSL.name("countryID"), new TableField[] { Hotel.HOTEL.COUNTRY_NO }, Keys.KEY_COUNTRY_PRIMARY, new TableField[] { Country.COUNTRY.COUNTRY_ID }, true);
    public static final ForeignKey<TravelRecord, UserAccountRecord> TRAVEL_IBFK_1 = Internal.createForeignKey(Travel.TRAVEL, DSL.name("travel_ibfk_1"), new TableField[] { Travel.TRAVEL.USER_ID }, Keys.KEY_USER_ACCOUNT_PRIMARY, new TableField[] { UserAccount.USER_ACCOUNT.ACCOUNT_ID }, true);
    public static final ForeignKey<TravelRecord, CustomerRecord> TRAVEL_IBFK_2 = Internal.createForeignKey(Travel.TRAVEL, DSL.name("travel_ibfk_2"), new TableField[] { Travel.TRAVEL.CUSTOMER_ID }, Keys.KEY_CUSTOMER_PRIMARY, new TableField[] { Customer.CUSTOMER.CUSTOMER_ID }, true);
    public static final ForeignKey<TravelRecord, TravelTypeRecord> TRAVEL_IBFK_3 = Internal.createForeignKey(Travel.TRAVEL, DSL.name("travel_ibfk_3"), new TableField[] { Travel.TRAVEL.TYPE_ID }, Keys.KEY_TRAVEL_TYPE_PRIMARY, new TableField[] { TravelType.TRAVEL_TYPE.TYPE_ID }, true);
    public static final ForeignKey<TravelRecord, CountryRecord> TRAVEL_IBFK_4 = Internal.createForeignKey(Travel.TRAVEL, DSL.name("travel_ibfk_4"), new TableField[] { Travel.TRAVEL.COUNTRY_ID }, Keys.KEY_COUNTRY_PRIMARY, new TableField[] { Country.COUNTRY.COUNTRY_ID }, true);
    public static final ForeignKey<TravelRecord, HotelRecord> TRAVEL_IBFK_5 = Internal.createForeignKey(Travel.TRAVEL, DSL.name("travel_ibfk_5"), new TableField[] { Travel.TRAVEL.HOTEL_ID }, Keys.KEY_HOTEL_PRIMARY, new TableField[] { Hotel.HOTEL.HOTEL_ID }, true);
    public static final ForeignKey<TravelRecord, TransportRecord> TRAVEL_IBFK_6 = Internal.createForeignKey(Travel.TRAVEL, DSL.name("travel_ibfk_6"), new TableField[] { Travel.TRAVEL.TRANSPORT_ID }, Keys.KEY_TRANSPORT_PRIMARY, new TableField[] { Transport.TRANSPORT.TRANSPORT_ID }, true);
    public static final ForeignKey<TravelRecord, NutritionRecord> TRAVEL_IBFK_7 = Internal.createForeignKey(Travel.TRAVEL, DSL.name("travel_ibfk_7"), new TableField[] { Travel.TRAVEL.NUTRITION_ID }, Keys.KEY_NUTRITION_PRIMARY, new TableField[] { Nutrition.NUTRITION.NUTRITION_ID }, true);
}
