/*
 * This file is generated by jOOQ.
 */
package com.example.travel.database.schema.tables;


import com.example.travel.database.schema.Keys;
import com.example.travel.database.schema.Sql4458432;
import com.example.travel.database.schema.tables.records.UserAccountRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserAccount extends TableImpl<UserAccountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sql4458432.user_account</code>
     */
    public static final UserAccount USER_ACCOUNT = new UserAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserAccountRecord> getRecordType() {
        return UserAccountRecord.class;
    }

    /**
     * The column <code>sql4458432.user_account.account_id</code>.
     */
    public final TableField<UserAccountRecord, Integer> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>sql4458432.user_account.firstname</code>.
     */
    public final TableField<UserAccountRecord, String> FIRSTNAME = createField(DSL.name("firstname"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>sql4458432.user_account.lastname</code>.
     */
    public final TableField<UserAccountRecord, String> LASTNAME = createField(DSL.name("lastname"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>sql4458432.user_account.username</code>.
     */
    public final TableField<UserAccountRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>sql4458432.user_account.password</code>.
     */
    public final TableField<UserAccountRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    private UserAccount(Name alias, Table<UserAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserAccount(Name alias, Table<UserAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>sql4458432.user_account</code> table reference
     */
    public UserAccount(String alias) {
        this(DSL.name(alias), USER_ACCOUNT);
    }

    /**
     * Create an aliased <code>sql4458432.user_account</code> table reference
     */
    public UserAccount(Name alias) {
        this(alias, USER_ACCOUNT);
    }

    /**
     * Create a <code>sql4458432.user_account</code> table reference
     */
    public UserAccount() {
        this(DSL.name("user_account"), null);
    }

    public <O extends Record> UserAccount(Table<O> child, ForeignKey<O, UserAccountRecord> key) {
        super(child, key, USER_ACCOUNT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Sql4458432.SQL4458432;
    }

    @Override
    public Identity<UserAccountRecord, Integer> getIdentity() {
        return (Identity<UserAccountRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserAccountRecord> getPrimaryKey() {
        return Keys.KEY_USER_ACCOUNT_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserAccountRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_USER_ACCOUNT_ACCOUNT_ID_UNIQUE, Keys.KEY_USER_ACCOUNT_USERNAME_UNIQUE);
    }

    @Override
    public UserAccount as(String alias) {
        return new UserAccount(DSL.name(alias), this);
    }

    @Override
    public UserAccount as(Name alias) {
        return new UserAccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAccount rename(String name) {
        return new UserAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAccount rename(Name name) {
        return new UserAccount(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
